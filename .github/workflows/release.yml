name: Release

on: workflow_dispatch

jobs:
  details:
    name: Release details
    runs-on: ubuntu-latest

    # XXX
    # permissions:
    #   contents: write

    outputs:
      version: ${{ steps.version.outputs.release }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      # OS-specific
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: python -m pip install -r dev-requirements.txt

      - name: Version details
        id: version
        run: |
          echo "::set-output name=release::`python -m release version`"
          echo "::set-output name=tag::`python -m release version --tag`"
        shell: bash

  release:
    name: GitHub release
    needs: details
    runs-on: ubuntu-latest

    steps:
      - name: Create release
        # XXX run: gh release create XXX --notes "" --draft
        run: echo ${{ needs.details.outputs.tag }}

  build:
    name: Build ${{ matrix.target }}
    needs: [details, release]
    runs-on: ${{ matrix.os }}

    # XXX
    # permissions:
    #   contents: write

    env:
      toolchain: stable

    strategy:
      fail-fast: false
      matrix:
        # https://doc.rust-lang.org/nightly/rustc/platform-support.html
        # https://github.com/rust-embedded/cross#supported-targets
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            use-cross: false
          - target: aarch64-apple-darwin
            os: macos-10.15
            use-cross: false
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
          - target: x86_64-unknown-netbsd
            os: ubuntu-latest
            use-cross: true

    steps:
      - uses: actions/checkout@v2

      # OS-specific
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: python -m pip install -r dev-requirements.txt

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ env.toolchain }}
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip binary
        if: ${{ !matrix.use-cross }}
        run: |
          du -h target/${{ matrix.target }}/release/py
          strip target/${{ matrix.target }}/release/py
          du -h target/${{ matrix.target }}/release/py

      - name: Create tarball
        run: |
          TAR_FILE=`python -m release tarball --target ${{ matrix.target }}`
          tar -tvf $TAR_FILE
          echo "tar_file=$TAR_FILE" >> $GITHUB_ENV
          
      - uses: actions/upload-asset@v2
        with:
          path:  ${{ env.tar_file }}

      # XXX
      # - name: Upload tarball
      #   run: gh release upload ${{ needs.details.outputs.tag }} ${{ env.tar_file }} --clobber
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
